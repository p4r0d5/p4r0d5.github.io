---
layout: post
title:  "git"
date:   2021-08-24 13:21:00 +0200
categories: git
---
GIT guide

**Remote Branch**

	git checkout -b your_branch
	git push -u origin your_branch

**Save credentials** <br>
1 edit .git/config url=https://user:password@url.git <br>
2 edit credentials file: ~/.git-credentials (https://user:password@url.git)  <br>

**Reset local uncommitted changes**

	git reset --hard HEAD

**Password symbols**
```
!   #   $    &   '   (   )   *   +   ,   /   :   ;   =   ?   @   [   ]
%21 %23 %24 %26 %27 %28 %29 %2A %2B %2C %2F %3A %3B %3D %3F %40 %5B %5D
```

**remove last commit and back to the previous one**

git reset --hard HEAD^

**Proxy settings**
```
[http]
	proxy = http://user:password@proxyaddress:proxyport
```

**Clean repo with bfg**


[https://rtyley.github.io/bfg-repo-cleaner/]: https://rtyley.github.io/bfg-repo-cleaner/

```
git clone --mirror git://example.com/some-big-repo.git
java -jar bfg.jar --strip-blobs-bigger-than 100M some-big-repo.git
cd some-big-repo.git
git reflog expire --expire=now --all && git gc --prune=now --aggressive
git push -f
```

**Clean repo with bfg**
```
mkdir <repo>
cd <repo>
git init
git remote add origin <url>
git config core.sparseCheckout true
echo "some/dir/" >> .git/info/sparse-checkout
git pull --depth=1 origin master
```
source: [https://unix.stackexchange.com/questions/233327/is-it-possible-to-clone-only-part-of-a-git-project](https://unix.stackexchange.com/questions/233327/is-it-possible-to-clone-only-part-of-a-git-project)

**Clone single branch**
```
git clone https://repo.git \
 --depth=1 --branch branchname --single-branch destpath
 ```
**Delete remote branch**
```
 git push origin --delete branchname
```

**merge**
merge single commit
```
git merge --squash
```

* '-X theirs' This strategy favors the changes from the branch you are merging in, effectively ignoring changes from the current branch where possible.					
* '-X ours' Conversely, this option favors changes from your current branch, effectively overriding incoming changes.				

**GPG**				
[note](./2022-5-18-gpg.markdown)			

**submodule**
```
git submodule update --init --recursive
```

**Windows**
check config files: 
```
git config --list --show-origin
```
git passwords are stored 

## git import
[link](./2025-5-28-gitimport.markdown)     